{"version":3,"sources":["history.ts","components/layout/layoutPage.tsx","components/layout/layoutPageContainer.tsx","components/calendar/calendarPage.tsx","common/constant/types.ts","components/calendar/calendarPageContainer.tsx","common/action/calendar/calendarEventsAction.ts","router.tsx","common/reducer/calendar/calendarEventsReducer.ts","rootReducer.ts","store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["createHistory","useStyles","makeStyles","theme","createStyles","root","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","grow","flexGrow","toolbar","alignItems","justifyContent","padding","mixins","content","LayoutPage","classes","useTheme","React","useState","open","setOpen","CssBaseline","AppBar","position","className","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","Badge","badgeContent","aria-haspopup","Drawer","paper","direction","Divider","List","to","exact","activeClassName","ListItem","button","ListItemIcon","ListItemText","primary","LayoutPageContainer","table","minWidth","CalendarPage","props","getCalendarEvents","calendarEvents","useEffect","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","events","payload","Types","CalendarPageContainer","connect","state","dispatch","a","setTimeout","type","title","date","error","MainLayout","Component","path","render","WebRouter","history","initialState","CalendarEventsReducer","action","RootReducer","combineReducers","store","createStore","applyMiddleware","ReduxThunk","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.98415897.chunk.js","sourcesContent":["import createHistory from \"history/createBrowserHistory\";\n\nexport default createHistory();\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport clsx from \"clsx\";\nimport {\n  createStyles,\n  makeStyles,\n  useTheme,\n  Theme\n} from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MailIcon from '@material-ui/icons/Mail';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\"\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    menuButton: {\n      marginRight: 36\n    },\n    hide: {\n      display: \"none\"\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: \"nowrap\"\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen\n      })\n    },\n    drawerClose: {\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      overflowX: \"hidden\",\n      width: theme.spacing(7) + 1,\n      [theme.breakpoints.up(\"sm\")]: {\n        width: theme.spacing(9) + 1\n      }\n    },\n    grow: {\n      flexGrow: 1,\n    },\n    toolbar: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      padding: theme.spacing(0, 1),\n      ...theme.mixins.toolbar\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3)\n    }\n  })\n);\n\nfunction LayoutPage() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open\n            })}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Byju's \n          </Typography>\n          <div className={classes.grow} />\n          <div>\n            <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n              <Badge badgeContent={4} color=\"secondary\">\n                <MailIcon />\n              </Badge>\n            </IconButton>\n            <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n              <Badge badgeContent={17} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-haspopup=\"true\"\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>\n          </div>\n          \n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open\n          })\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? (\n              <ChevronRightIcon />\n            ) : (\n              <ChevronLeftIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List className=\"sidebar\">\n          <NavLink to=\"/\" exact activeClassName=\"selectedLink\">\n            <ListItem button>\n              <ListItemIcon>\n                <DateRangeIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Calendar\" />\n            </ListItem>\n          </NavLink>\n          {/* <NavLink to=\"/create-new-job\" exact activeClassName=\"selectedLink\">\n            <ListItem button>\n              <ListItemIcon>\n                <AddIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"New Job\" />\n            </ListItem>\n          </NavLink> */}\n        </List>\n      </Drawer>\n    </>\n  );\n}\n\nexport default LayoutPage;\n","import LayoutPage from \"./layoutPage\";\nimport \"./css/layoutStyle.css\";\n\nexport const LayoutPageContainer = LayoutPage;\n","import * as React from \"react\";\nimport { useEffect } from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { CalendarEntity } from \"../../common/model\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    toolbar: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      padding: theme.spacing(0, 1),\n      ...theme.mixins.toolbar\n    },\n    table: {\n      minWidth: 650\n    }\n  })\n);\n\ninterface Props{\n  getCalendarEvents():void;\n  calendarEvents:CalendarEntity;\n}\n\nconst CalendarPage = (props: Props) => {\n    const classes = useStyles();\n    const {getCalendarEvents, calendarEvents} = props;\n\n    useEffect(() => {\n      getCalendarEvents()\n    }, [])\n\n    return(\n        <div>\n            <div className={classes.toolbar} />\n            <div className=\"body-spacing\">\n              <FullCalendar\n                plugins={[ dayGridPlugin, timeGridPlugin, interactionPlugin ]}\n                headerToolbar={{\n                  left: 'prev,next today',\n                  center: 'title',\n                  right: 'dayGridMonth,timeGridWeek,timeGridDay'\n                }}\n                initialView='dayGridMonth'\n                events={calendarEvents.payload}\n              />\n            </div>\n        </div>\n    )\n}\n\nexport default CalendarPage;","export const Types = {\n    GET_EVENTS_SUCCESS: \"GET_EVENTS_SUCCESS\",\n    GET_EVENTS_FAILURE: \"GET_EVENTS_FAILURE\",\n}","import CalendarPage from \"./calendarPage\";\nimport { getCalendarEvents } from \"../../common/action\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../../rootReducer\";\nimport \"./css/calendarStyle.css\";\n\nconst mapStateToProps = (state: State) => ({\n    calendarEvents: state.calendarEvents\n});\n  \nconst mapDispatchToProps = (dispatch: any) => ({\n    getCalendarEvents: () => dispatch(getCalendarEvents()),\n});\n\nexport const CalendarPageContainer = connect(mapStateToProps, mapDispatchToProps)(CalendarPage);","import { Types } from \"../../constant/types\";\nimport { CalendarEventsEntity, CalendarEventsActionEntity } from \"../../model\";\n\nexport const getCalendarEventsSuccess = (result: CalendarEventsEntity[]): CalendarEventsActionEntity => ({\n    type: Types.GET_EVENTS_SUCCESS,\n    payload: result,\n    error: \"\"\n});\n  \nexport const getCalendarEventsFailure = (): CalendarEventsActionEntity => ({\n    type: Types.GET_EVENTS_FAILURE,\n    payload: [],\n    error: \"Something went wrong! Please try again later!\"\n});\n\nexport const getCalendarEvents = () => async (dispatch: any) => {\n    setTimeout(()=> {\n        const events:CalendarEventsEntity[] = [\n            { title: 'Conference', date: '2020-07-01'},\n            { title: 'Meeting', date: '2020-07-01' + 'T14:00:00'},\n            { title: 'Birthday Party', date: '2020-07-04'},\n            { title: 'StandUp Meet', date: '2020-07-06'},\n            { title: 'Scrum Discussion', date: '2020-07-09'},\n            { title: 'Conference', date: '2020-07-09' + 'T12:00:00'},\n            { title: 'Meeting', date: '2020-07-12'},\n            { title: 'Conference', date: '2020-07-14'},\n            { title: 'Conference', date: '2020-07-14'+ 'T12:00:00'},\n            { title: 'Lunch Meet', date: '2020-07-16' + 'T12:00:00'},\n            { title: 'Training', date: '2020-07-18'},\n            { title: 'Training', date: '2020-07-19'},\n            { title: 'Lunch Meet', date: '2020-07-19' + 'T12:00:00'},\n            { title: 'Meeting', date: '2020-07-25'},\n            { title: 'Conference', date: '2020-07-30'}\n        ]\n        \n        dispatch(getCalendarEventsSuccess(events))\n    }, 1000);\n}\n","import * as React from \"react\";\nimport { Route, Router, Switch, Redirect } from \"react-router-dom\";\nimport history from \"./history\";\n\nimport {\n  LayoutPageContainer,\n  CalendarPageContainer\n} from \"./components\";\n\ninterface Props {\n  Component: any;\n  path: string;\n  exact?: boolean;\n}\n\nconst MainLayout = (props: Props) => {\n  const { Component, path } = props;\n\n  return (\n    <Route\n      path={path}\n      render={() => (\n        <>\n          <div className=\"root\">\n            <LayoutPageContainer />\n            <div className=\"width-100\">\n              <Component />\n            </div>\n          </div>\n        </>\n      )}\n    />\n  );\n};\n\nconst WebRouter = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <MainLayout exact path=\"/\" Component={CalendarPageContainer} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default WebRouter;\n","import { Types } from \"../../constant/types\";\nimport { CalendarEntity, CalendarEventsActionEntity } from \"../../model\";\n\nconst initialState: CalendarEntity = {\n  payload: [],\n  error: \"\"\n};\n\nconst CalendarEventsReducer = ( state: CalendarEntity = initialState, action: CalendarEventsActionEntity ): CalendarEntity => {\n  switch (action.type) {\n    case Types.GET_EVENTS_SUCCESS:\n      return {\n        payload: action.payload,\n        error: action.error\n      };\n\n    case Types.GET_EVENTS_FAILURE:\n      return {\n        payload: action.payload,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default CalendarEventsReducer;\n","import { combineReducers } from \"redux\";\n\nimport { CalendarEntity } from \"./common/model\";\n\nimport CalendarEventsReducer from \"./common/reducer/calendar/calendarEventsReducer\";\n\nexport interface State {\n  calendarEvents: CalendarEntity;\n}\n\nconst RootReducer = combineReducers({\n  calendarEvents: CalendarEventsReducer,\n});\n\nexport default RootReducer;\n","import { Store, createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport RootReducer, { State } from \"./rootReducer\";\n\nconst store: Store<State> = createStore(\n  RootReducer,\n  applyMiddleware(ReduxThunk)\n);\n\nexport default store;\n","import React from 'react';\nimport WebRouter from \"./router\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n     <WebRouter />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}